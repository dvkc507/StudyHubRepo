Token: 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
Git User Email: chaitanya.savari@gmail.com Tapasvi@2016, username: dvkc507
git commands all small cases
1. git clone https://github.com/dvkc507/StudyHubRepo.git
2. git branch 
Displays the all available branches(local & remote)
3. git branch -a
Displays the all available remote branches(local & remote), also provides full path of brnaches like 
remotes/origin/HEAD-> origin/main
remotes/origin/main
4. git branch NewBrachName or git branch -c NewBrachName 
Creating the new branch, but this branch will be there in local, and no upstream branch in the remote repository, so use the below
git push --set-upstream origin NewBrachName 
5. clear
6. exit
7. git checkout branchname
for swicthing to another branch, if branch is not available then git throws error stating that file doest not exists in github
8. What is difference between git switch and git checkout?
Git Switch vs. Checkout: What's the Difference?
Git switch and git checkout are both used to change branches, but they have some differences in syntax and behavior. Git switch is a newer command that is more focused on branches, while git checkout is an older command that can do other things besides switching branches.
switch was introduced in 2020 git release
9. git switch branchname
10. git commit -m "message"
used to record the changes
11. git status
12. git branch --help
13. mkdir folder1
14. cd folder1
15. git add . (This process is called staging, where index are created for snapshort)
16. git push origin branchname
17. git pull origin branchname
18. Merging done from local
------
Revert:
Rollback changes you have committed.
Creates a new commit from a specified commit by inverting it. Hence, adds a new commit history to the project, but it does not modify the existing one.
Has the potential to overwrite files in the working directory.
Reset:
Use this to return the entire working tree to the last committed state. This will discard commits in a private branch or throw away uncommitted changes!
Changes which commit a branch HEAD is currently pointing at. It alters the existing commit history.
Can be used to unstage a file.
git reset --hard HEAD~3 //3 commits will be removed from local, if you commit then we will get error saying that you will get a fast-forward error because your local history diverges from the remote history. then use git push -f for force forward  
----
you can think of git revert as a tool for undoing committed changes, while git reset HEAD is for undoing uncommitted changes.
Scenario: Image that you did git push in hotfix branch for commits you didn't want to make yet.
Solution: The safest way to fix this is by reverting your changes since it doesn't re-write the commit history
----
For displaying the commits use below, one line it will show
git log --oneline
-----
When to Use git reset and git revert
You should use git reset when working on a local repository with changes yet to be pushed remotely. This is because running this command after pulling changes from the remote repo will alter the commit history of the project, leading to merge conflicts for everyone working on the project.

git reset is a good option when you realize that the changes being made to a particular local branch should be somewhere else. You can reset and move to the desired branch without losing your file changes.

git revert is a good option for reverting changes pushed to a remote repository. Since this command creates a new commit, you can safely get rid of your mistakes without rearranging the commit history for everyone else.
-------
